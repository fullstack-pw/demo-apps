openapi: 3.0.3
info:
  title: Fullstack Message Processing API
  description: |
    API for processing messages through the fullstack microservices pipeline.
    The API allows for submitting messages that are processed into ASCII art.
  version: 1.0.0
  contact:
    name: Fullstack Support
    email: support@fullstack.pw
servers:
  - url: https://enqueuer.fullstack.pw
    description: Production server
  - url: https://stg.enqueuer.fullstack.pw
    description: Staging server
  - url: https://dev.enqueuer.fullstack.pw
    description: Development server
tags:
  - name: messages
    description: Message processing operations
  - name: status
    description: Status check operations
  - name: health
    description: Health check endpoints
  - name: ascii
    description: ASCII art generation endpoints
paths:
  /add:
    post:
      tags:
        - messages
      summary: Submit a new message for processing
      description: |
        Submits a message to be processed by the pipeline. The message will be
        converted to ASCII art based on the content.
      operationId: addMessage
      parameters:
        - name: queue
          in: query
          description: The queue to send the message to
          required: false
          schema:
            type: string
            default: default
      requestBody:
        description: Message to be processed
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Message"
      responses:
        "201":
          description: Message accepted and processed
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AddMessageResponse"
        "400":
          description: Invalid input
        "500":
          description: Server error

  /check-memorizer:
    get:
      tags:
        - status
      summary: Check if a message was processed by the memorizer
      description: |
        Checks whether a specific message has been processed by the memorizer service
      operationId: checkMemorizer
      parameters:
        - name: id
          in: query
          description: Message ID to check
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Status check completed
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MemorizerStatusResponse"
        "400":
          description: Missing message ID
        "500":
          description: Server error

  /check-writer:
    get:
      tags:
        - status
      summary: Check if a message was stored by the writer
      description: |
        Checks whether a specific message has been stored by the writer service
      operationId: checkWriter
      parameters:
        - name: id
          in: query
          description: Message ID to check
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Found message
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/WriterStatusResponse"
        "400":
          description: Missing message ID
        "404":
          description: Message not found
        "500":
          description: Server error

  /natscheck:
    get:
      tags:
        - health
      summary: Check NATS connection status
      description: |
        Checks if the NATS connection is working properly
      operationId: checkNats
      responses:
        "200":
          description: NATS connection is working
          content:
            text/plain:
              schema:
                type: string
                example: "NATS connection OK"
        "503":
          description: NATS connection is not working
          content:
            text/plain:
              schema:
                type: string
                example: "NATS connection lost"

  /ascii/terminal:
    get:
      tags:
        - ascii
      summary: Get terminal ASCII art
      description: |
        Returns terminal-formatted ASCII art for a specific trace ID
      operationId: getTerminalAscii
      parameters:
        - name: trace_id
          in: query
          description: Trace ID of the processed message
          required: true
          schema:
            type: string
      responses:
        "200":
          description: ASCII art in terminal format
          content:
            text/plain:
              schema:
                type: string
        "400":
          description: Missing trace ID
        "404":
          description: ASCII art not found
        "500":
          description: Server error

  /ascii/html:
    get:
      tags:
        - ascii
      summary: Get HTML ASCII art
      description: |
        Returns HTML-formatted ASCII art for a specific trace ID
      operationId: getHtmlAscii
      parameters:
        - name: trace_id
          in: query
          description: Trace ID of the processed message
          required: true
          schema:
            type: string
      responses:
        "200":
          description: ASCII art in HTML format
          content:
            text/html:
              schema:
                type: string
        "400":
          description: Missing trace ID
        "404":
          description: ASCII art not found
        "500":
          description: Server error

  /health:
    get:
      tags:
        - health
      summary: Overall health check
      description: |
        Returns the overall health status of all components
      operationId: healthCheck
      responses:
        "200":
          description: All systems operational
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/HealthResponse"
        "503":
          description: One or more systems unhealthy
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/HealthResponse"

  /livez:
    get:
      tags:
        - health
      summary: Liveness check
      description: |
        Basic liveness check to verify the service is running
      operationId: livenessCheck
      responses:
        "200":
          description: Service is alive
          content:
            text/plain:
              schema:
                type: string
                example: "OK"

  /readyz:
    get:
      tags:
        - health
      summary: Readiness check
      description: |
        Readiness check to verify the service is ready to accept requests
      operationId: readinessCheck
      responses:
        "200":
          description: Service is ready
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/HealthResponse"
        "503":
          description: Service is not ready
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/HealthResponse"

components:
  schemas:
    Message:
      type: object
      properties:
        id:
          type: string
          description: Unique identifier for the message (optional, will be generated if not provided)
          example: "user-123-message-456"
        content:
          type: string
          description: Content of the message, used for image search and ASCII art generation
          example: "Mountain landscape with sunset"
        headers:
          type: object
          additionalProperties:
            type: string
          description: Optional headers for the message
          example:
            source: "web-app"
            user-id: "user-123"
      required:
        - content

    AddMessageResponse:
      type: object
      properties:
        status:
          type: string
          description: Status of the message processing
          example: "completed"
        queue:
          type: string
          description: Queue the message was sent to
          example: "default"
        image_url:
          type: string
          description: URL of the image found for the message content
          example: "https://example.com/images/sunset.jpg"
        image_ascii_text:
          type: string
          description: ASCII art representation in text format
          example: "   /\\    \n  /  \\   \n /____\\  \n"
        image_ascii_html:
          type: string
          description: ASCII art representation in HTML format
          example: "<pre style='color:#FFF;background:#000'>   /\\    \n  /  \\   \n /____\\  \n</pre>"

    MemorizerStatusResponse:
      type: object
      properties:
        id:
          type: string
          description: Message ID that was checked
          example: "msg-1234567890"
        processed:
          type: boolean
          description: Whether the message has been processed by the memorizer
          example: true

    WriterStatusResponse:
      type: object
      properties:
        id:
          type: string
          description: Message ID
          example: "msg-1234567890"
        content:
          type: string
          description: Original message content
          example: "Mountain landscape with sunset"
        headers:
          type: object
          additionalProperties:
            type: string
          description: Message headers
          example:
            source: "web-app"
            image_url: "https://example.com/images/sunset.jpg"
        timestamp:
          type: string
          format: date-time
          description: Timestamp when the message was stored
          example: "2023-04-07T12:34:56Z"
        trace_id:
          type: string
          description: Trace ID for distributed tracing
          example: "1234567890abcdef"
        ascii_art:
          type: object
          properties:
            terminal:
              type: string
              description: URL to get terminal ASCII art
              example: "/ascii/terminal?id=msg-1234567890"
            file:
              type: string
              description: URL to get ASCII art as a file
              example: "/ascii/file?id=msg-1234567890"
            html:
              type: string
              description: URL to get HTML ASCII art
              example: "/ascii/html?id=msg-1234567890"

    ComponentStatus:
      type: object
      properties:
        status:
          type: string
          enum: [UP, DOWN]
          description: Status of the component
          example: "UP"
        name:
          type: string
          description: Name of the component
          example: "nats"
        message:
          type: string
          description: Message describing status (only present for DOWN status)
          example: "Failed to connect to NATS"

    HealthResponse:
      type: object
      properties:
        status:
          type: string
          enum: [UP, DOWN]
          description: Overall status
          example: "UP"
        components:
          type: object
          additionalProperties:
            $ref: "#/components/schemas/ComponentStatus"
          description: Status of individual components
          example:
            nats:
              status: "UP"
              name: "nats"
        timestamp:
          type: string
          format: date-time
          description: Time of health check
          example: "2023-04-07T12:34:56Z"
